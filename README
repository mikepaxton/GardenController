
Basic Function Goals:
1 - Use a Raspberry Pico to control the system.
2 - Use 12v solenoid valve, one for each bed.
3 - Use solar setup to run the system. (Maybe tie into chicken coop solar setup)
4 - Allow for manually turning on each garden bed valve.
5 - Use an LED to visual display a valve is turned on/off.  The relay board has its own LED for each relay.

Advanced Function Goals:
1 - Automated garden watering system for my 8 garden beds.
2 - Allow for wireless control using Pico W
3 - Build a basic webpage which can control and monitor the status of system.
4 - Use Bluetooth soil moisture meters to determine if watering is needed.
5 - Use a water flow meter to determine how much water is being used and a daily and monthly bases.

TODO: The current set_rtc_datetime function grabs unixtime, raw_offset and DST (daylight savings) to calculate and
 set the real time clock built into the Pico. It would be nice to just grab datetime and find a way to parse and format
 the variable.  Would make the code much cleaner.

TODO: Create a web interface of some sort which will allow us to modify the schedule and/or turn on/off relays.

TODO: Look into using the Bluetooth soil moisture sensors the I purchased when switchdocs stopped selling
 raspberry pi project parts. It appears the currently CircuitPython does not support the Pico.  No libraries found.


How the system should function:
Each garden bed will have its own 12v solenoid and a corresponding button to activate/deactivate it.
The system is being designed to work off of a solar battery system.  Not far from my garden is my chicken coop which
also uses a Raspberry Pico to control the opening and closing of the coop door.  (The code for that project can be found
on my GitHub page under ChickenCoop-CircuitPython.)  I have a 100w solar panel on top of the coop which charges a 12v
deep cycle battery inside the coop.  My goal is to run th 12v line in underground conduit from my chicken coop battery
to the garden.  Since the garden is only in use during the summer months, my hope is that solar system will work for
both projects.


This is the format the Pico RTC uses for date/time
Current Time Format: struct_time(tm_year=2023, tm_mon=8, tm_mday=6, tm_hour=17, tm_min=51, tm_sec=40, tm_wday=6, tm_yday=218, tm_isdst=-1)

tm_wday=
0: Monday
1: Tuesday
2: Wednesday
3: Thursday
4: Friday
5: Saturday
6: Sunday

# Examples of Garden Bed Scheduling
# The indices of the sublist represent days of the week (0 = Monday, 6 = Sunday).
garden_bed_schedule = [
    [0, 1, 2, 3, 4, 5, 6],  # Garden Bed 1 (Every day)
    [0, 2, 4],  # Garden Bed 2 (Monday, Wednesday, Friday)
    [1, 3, 5],  # Garden Bed 3 (Tuesday, Thursday, Saturday)
    [0, 3, 6],  # Garden Bed 4 (Monday, Thursday, Sunday)
    [1, 4],  # Garden Bed 5 (Tuesday, Friday)
    [3, 5],  # Garden Bed 6 (Wednesday, Saturday)
    [0],  # Garden Bed 7 (Monday only)
    [1],  # Garden Bed 8 (Tuesday only)
]
# Example of how to set watering times and durations
# Define the watering time and duration for each garden bed using tuples: (hour, minute, duration in minutes).
# Times are in 24hr format, 6,10 is 6:10am, 13:45 is 1:45pm and so on.
watering_times = [
    (7, 0, 10),  # Garden Bed 1 watering time (7:00 AM for 10 minutes)
    (12, 30, 15),  # Garden Bed 2 watering time (12:30 PM for 15 minutes)
    (15, 45, 8),  # Garden Bed 3 watering time (3:45 PM for 8 minutes)
    (10, 15, 12),  # Garden Bed 4 watering time (10:15 AM for 12 minutes)
    (8, 30, 20),  # Garden Bed 5 watering time (8:30 AM for 20 minutes)
    (16, 0, 10),  # Garden Bed 6 watering time (4:00 PM for 10 minutes)
    (9, 30, 15),  # Garden Bed 7 watering time (9:30 AM for 15 minutes)
    (11, 0, 10),  # Garden Bed 8 watering time (11:00 AM for 10 minutes)
]

The garden_bed_index is a parameter in the is_watering_day function that represents the index of a specific garden bed
in the garden_bed_schedule list. It is used to determine whether the current day is a watering day for the
corresponding garden bed.

In the context of the provided code, garden_bed_index is an integer value that ranges from 0 to the number of garden
beds minus 1. It is used to specify which garden bed's watering schedule is being checked.

For example, if you call is_watering_day(2, 3), it means you are checking whether Garden Bed 3 (0-based index) should
be watered on the 3rd day of the week (Wednesday, since days are 0-based indices as well). The function would then look
 at the garden_bed_schedule list to determine if Garden Bed 3 should be watered on Wednesdays.